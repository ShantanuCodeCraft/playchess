pipeline{
    agent any

    tools {
        nodejs "node.js-25"
    }

    environment {
        SONARQUBE_ENV = "sonarqube-scanner"
        APP_NAME = "chess-backend"
        DOCKER_REPOSITORY = ""
    }

    stages{
        stage("Sonarqube Analysis"){
            environment {
                SONAR_HOME= tool "SonarScanner"
            }
            steps{
                dir('Application-code/backend'){
                    withSonarQubeEnv(env.SONARQUBE_ENV) {
                        sh """${SONAR_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${APP_NAME}\
                            -Dsonar.projectName='${APP_NAME}' 
                        """
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps{
                timeout(time: 15, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("OWASP Dependency Check"){
            steps{
                dir('Application-code/backend'){
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'dependency-check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        stage("Docker Image Build"){
            steps{
                dir('Application-code/backend'){
                    sh 'docker build . -t ${DOCKER_REPOSITORY}/${APP_NAME}'
                }
            }
        }
    }
}

